<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright 2013 KRV

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="MAC0242-Project" default="dist" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        A Real Time Strategy game - with Robots
    </description>
    
    <!-- 
    ===================================================================
    ==                   DIRECTORIES AND LIBRARIES                   ==
    ===================================================================
    -->
    
    <property file="build.properties"/>
    <property name="doc.javadoc.dir"     location="${doc.dir}/javadoc"/>
    <property name="build.classes.dir"   location="${build.dir}/classes"/>
    
    <property name="src.parser.dir"      location="${src.dir}/parser"/>
       
    <!-- Path to the languages supported by the game -->
    <property name="src.parser.positron.dir" 
              location="${src.parser.dir}/positron"/>
    
    <!-- Path for dependencies -->
    <path id="libraries.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <!-- 
    ===================================================================
    ==                   DISTRIBUTION PROPERTIES                     ==
    ===================================================================
    -->
    
    <!-- Jar File: Configure the path to the jar and it will set the
                   relative paths to all its dependencies            -->
    <property name="jar.file" value="${project.name}.jar"/>
    <property name="jar.path" value="${dist.dir}/${jar.file}"/>
    
    <!-- One-Jar: Configurations for creating a single package -->
    <property name="one-jar.dir"     value="./one-jar"/>   
    <property name="one-jar.version" value="0.97"/>
    <property 
        name  = "one-jar.ant.jar"
        value = "${one-jar.dir}/one-jar-ant-task-${one-jar.version}.jar"
    />
    
    <taskdef name="one-jar" 
        classname="com.simontuffs.onejar.ant.OneJarTask" 
        classpath="${one-jar.ant.jar}" onerror="report"
    />
    
    <!-- 
    ===================================================================
    ==                             USAGE                             ==
    ===================================================================
    -->
    <target name="usage"> 
        <echo>  Execute 'ant -projecthelp' for build file help.</echo> 
        <echo>  Execute 'ant -help' for Ant help.</echo>
    </target> 
    
    <!-- 
    ===================================================================
    ==                           MANIFEST                            ==
    ===================================================================
    -->

    <!-- Create MANIFEST.MF file for the main .jar -->
    <target name="manifest">
        <echo>Creating MANIFEST.MF file</echo>
        
        <manifestclasspath property="mf.classpath" jarfile="${jar.path}">
            <classpath refid="libraries.path"/>
        </manifestclasspath> 
        
        <manifest file="${build.dir}/MANIFEST.MF">
            <attribute name="Main-Class" value="${mf.main.class}" />
            <attribute name="Class-Path" value="${mf.classpath}"  />
            
            <section name="Info">
                <attribute name="Built-By"   value="${user.name}"     />
                <attribute name="Created-By" value="${mf.created.by}" />
            </section>
            
            <section name="Common">
                <attribute name  = "Specification-Title"
                           value = "${mf.spec.title}"       />
                <attribute name  = "Specification-Vendor"
                           value = "${mf.spec.vendor}"      />
                <attribute name  = "Implementation-Tytle"
                           value = "${mf.impl.title}"       />
                <attribute name  = "Implementation-Version"  
                           value = "${mf.impl.vertion}"     />
            </section>
        </manifest>
        <echo>MANIFEST.MF Created Successfully</echo>
        <echo message="Classpath: ${mf.classpath}"/>
    </target>

    <!-- 
    ===================================================================
    ==                         DEPENDENCIES                          ==
    ===================================================================
    -->
    <!-- Resolve dependencies -->
    <target name="resolve">
        <echo>Resolving dependencies</echo>
        <ivy:retrieve pattern="${lib.dir}/[artifact].[ext]" type="jar"/>
        <echo>Dependencies Resolved Successfully</echo>
    </target>    
    
    <!-- Resolve and list dependencies -->
    <target name="report" depends="resolve">
        <ivy:report todir="${build.dir}"/>
    </target>
    
    <!-- 
    ===================================================================
    ==                          COMPILER                             ==
    ===================================================================
    -->
    
    <target name="parser" depends="resolve">
        <echo>Building language parser</echo>
        <javacc
            target          = "${src.parser.dir}/Positron.jj"
            javacchome      = "${lib.dir}"
            outputdirectory = "${src.parser.positron.dir}"
            static          = "yes">
        </javacc>
        <echo>Parser built successfully</echo>
    </target>
    
    <!-- 
    ===================================================================
    ==                            BUILD                              ==
    ===================================================================
    -->
    <!-- Creating directories for build -->
    <target name="init">
        <tstamp>
            <format property="DATE" pattern="yyyy.MM.dd" locale="pt,BR"/> 
        </tstamp>
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${doc.javadoc.dir}" />
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${src.parser.positron.dir}" />
    </target>
    
    <!-- Compile messages and rules -->
    <target name="compile" depends="init,resolve,parser">
        <echo>Starting the compilation process</echo>
        <javac destdir = "${build.classes.dir}"
               srcdir  = "${src.dir}"
               includeAntRuntime = "no">
               <classpath refid="libraries.path"/>
        </javac>
        <echo>Compilation completed successfully</echo>
    </target>

    <!-- 
    ===================================================================
    ==                         DISTRIBUTION                          ==
    ===================================================================
    -->
    
    <!-- Compressing files and saving main .jar in dist bin -->
    <target name="dist" depends="compile,manifest">
        <echo>Building main .jar file</echo>
        <echo>Dependencies: ${lib.dir}</echo>
        
        <!-- Jar main file with data and .class files -->
        <jar destfile = "${jar.path}" 
             manifest = "${build.dir}/MANIFEST.MF">
            <!-- Base directories -->
            <fileset dir  = "${build.classes.dir}"/>
            <fileset dir  = "${data.dir}"/>
        </jar>
        
        <echo>Main .jar Build Successfully Completed</echo>
    </target>
    
    <!-- Compress all files and dependencies with One-Jar -->
    <import file="${one-jar.dir}/one-jar-ant-task.xml" optional="true"/>
    <target name="jar" depends="dist">
        <echo>Packing distribution to .jar file</echo>
        
        <one-jar destfile="dist/Robot-Battle.jar">
            
            <!-- Create a Manifest.mf to One-Jar -->
            <manifest>
                <attribute name="Main-Class" 
                           value="${jar.path}"/>
                <attribute name="One-Jar-Main-Class" 
                           value="${mf.main.class}"/>
            </manifest>
 
            <!-- Load the main Jar -->
            <main jar="${jar.path}"/>

            <!-- Get Jar dependencies -->
            <lib><fileset dir="${lib.dir}" includes="**/*.jar"/></lib>
            
        </one-jar>
        <echo>Distribution .jar Pack Successfully Completed</echo>
    </target>
    
    <!-- Shortcut for 'ant dist', but could be more... -->
    <target name="all" depends="dist" />
    
    <!-- 
    ===================================================================
    ==                          OTHER BUILDS                         ==
    ===================================================================
    -->
    <target name="build-server" depends="compile">
        <echo>Building server .jar file</echo>
        <echo>Dependencies: ${lib.dir}</echo>
        
        <!-- Jar main file with data and .class files -->
        <jar destfile = "dist/Robot-Battle-Server.jar">
            
            <!-- Create a Manifest.mf to One-Jar -->
            <manifest>
                <attribute name="Main-Class" 
                           value="arena.WorldServer"/>
            </manifest>
            
            <!-- Base directories -->
            <fileset dir  = "${build.classes.dir}"/>
            <fileset dir  = "${data.dir}"/>
        </jar>
        
        <echo>Server .jar Build Successfully Completed</echo>
    </target>
    
    <!-- 
    ===================================================================
    ==                         DOCUMENTATION                         ==
    ===================================================================
    -->
    <!-- Generate javadocs for current project into ${doc.dir} -->
    <target name="javadoc" depends="init">
        <description>Generate documentation</description>
            <javadoc 
                author      = "yes"
                package     = "yes"
                encoding    = "utf8"
                doctitle    = "${project.name}"
                destdir     = "${doc.javadoc.dir}"
                windowtitle = "${project.name}">
                
                <!-- Packages to be included/excluded -->
                <packageset dir="${src.dir}" defaultexcludes="yes">
                    <exclude name = "parser**"/>
                </packageset>
                
                <!-- Classpath for getting external libraries -->
                <classpath refid="libraries.path"/>
            </javadoc>
            
            <jjdoc 
                target="${src.parser.dir}/Positron.jj" 
                outputfile="${doc.javadoc.dir}/Positron.html"
                javacchome="${lib.dir}">
            </jjdoc>
        </target>

    <!-- Publish javadoc using shell script 'publish.sh' -->
    <target name="publish" depends="javadoc">
        <description>Publish documentation</description>
        <exec executable="/bin/bash">
            <arg value="publish.sh"/>
        </exec>
    </target>

    <!-- Shortcut for 'ant javadoc', but could be more... -->
    <target name="doc" depends="javadoc" />
    
    <!-- 
    ===================================================================
    ==                            CLEAN                              ==
    ===================================================================
    -->
    <!-- Remove .class files -->
    <target name="clean">
        <delete dir="${build.dir}" />
    </target>
    
    <!-- Remove all files generated by ant -->
    <target name="distclean" depends="clean">
        <delete dir="${dist.dir}" />
        <delete dir="${src.parser.positron.dir}"/>
        <delete>
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </delete>
    </target>
    
</project>
