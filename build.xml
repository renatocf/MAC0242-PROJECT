<!-- Copyright 2013 KRV                                                       -->
<!--                                                                          -->
<!-- Licensed under the Apache License, Version 2.0 (the "License");          -->
<!-- you may not use this file except in compliance with the License.         -->
<!-- You may obtain a copy of the License at                                  -->
<!--                                                                          -->
<!--  http://www.apache.org/licenses/LICENSE-2.0                              -->
<!--                                                                          -->
<!-- Unless required by applicable law or agreed to in writing, software      -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,        -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. -->
<!-- See the License for the specific language governing permissions and      -->
<!-- limitations under the License.                                           -->

<?xml version="1.0" encoding="utf-8"?>

<project name="MAC0242-Project" default="dist" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        A Real Time Strategy game - with Robots
    </description>

    <!-- 
    ===================================================================
    ==                         PROJECT INFO                          ==
    ===================================================================
    -->
    <property name  = "mf.created.by"   value = 
        "Karina Suemi, Renato Cordeiro, Vinicius Silva"    />
    <property name  = "mf.spec.title"   value = "Project"  />
    <property name  = "mf.spec.vendor"  value = "MAC0242"  />
    <property name  = "mf.impl.title"   value = "MAC0242"  />
    <property name  = "mf.impl.vertion" value = "MAC0242"  />
    <property name  = "mf.main.class"   value = "main.Main"/>
    
    <!-- 
    ===================================================================
    ==                      DIRECTORY STRUCTURE                      ==
    ===================================================================
    -->
    
    <property name="bin.dir"           location="bin"    />
    <property name="lib.dir"           location="lib"    />
    <property name="src.dir"           location="src"    />
    <property name="doc.dir"           location="doc"    />
    <property name="dist.dir"          location="dist"   />
    <property name="build.dir"         location="build"  />
    <property name="doc.javadoc.dir"   location="${doc.dir}/javadoc"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    
    <!-- Jar File: Configure the path to the jar and it will set the
                   relative paths to all its dependencies            -->
    <property name="jar.file" value="${dist.dir}/${ant.project.name}.jar"/>

    <path id="libraries.path">    
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- 
    ===================================================================
    ==                             USAGE                             ==
    ===================================================================
    -->
    <target name="usage"> 
        <echo>  Execute 'ant -projecthelp' for build file help.</echo> 
        <echo>  Execute 'ant -help' for Ant help.</echo>
    </target> 
    
    <!-- 
    ===================================================================
    ==                           MANIFEST                            ==
    ===================================================================
    -->

    <!-- Create MANIFEST.MF file for .jar -->
    <target name="manifest">
        <echo>Creating MANIFEST.MF file</echo>
        
        <manifestclasspath property="mf.classpath" 
                           jarfile="${jar.file}">
            <classpath refid="libraries.path"/>
        </manifestclasspath> 

        <manifest file="${build.dir}/MANIFEST.MF">
            <attribute name="Built-By"   value="${user.name}"/>
            <attribute name="Created-By" value="${mf.created.by}"/>
            <attribute name="Main-Class" value="${mf.main.class}"/>
            <attribute name="Class-Path" value="${mf.classpath}"/>
            <section name="common">
                <attribute name  = "Specification-Title"
                           value = "${mf.spec.title}"       />
                <attribute name  = "Specification-Vendor"
                           value = "${mf.spec.vendor}"      />
                <attribute name  = "Implementation-Tytle"
                           value = "${mf.impl.title}"       />
                <attribute name  = "Implementation-Version"  
                           value = "${mf.impl.vertion}"     />
            </section>
        </manifest>
        <echo>MANIFEST.MF Created Successfully</echo>
        <echo message="Classpath: ${mf.classpath}"/>
    </target>

    <!-- 
    ===================================================================
    ==                         DEPENDENCIES                          ==
    ===================================================================
    -->
    <!-- Resolve dependencies -->
    <target name="resolve">
        <echo>Resolving dependencies</echo>
        <ivy:retrieve/>
        <echo>Dependencies Resolver Successfully</echo>
    </target>    
    
    <!-- Resolve and list dependencies -->
    <target name="report" depends="resolve">
        <ivy:report todir="${build.dir}"/>
    </target>

    <!-- 
    ===================================================================
    ==                            BUILD                              ==
    ===================================================================
    -->
    <!-- Creating directories for build -->
    <target name="init">
        <tstamp>
            <format property="DATE" pattern="yyyy.MM.dd" locale="pt,BR"/> 
        </tstamp>
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${doc.javadoc.dir}" />
        <mkdir dir="${build.classes.dir}" />
    </target>
    
    <!-- Compile messages and rules -->
    <target name="compile" depends="init,resolve">
        <echo>Starting the compilation process</echo>
        <javac destdir = "${build.classes.dir}"
               srcdir  = "${src.dir}"
               includeAntRuntime = "no">
               <classpath refid="libraries.path"/>
        </javac>
        <echo>Compilation Completed Successfully</echo>
    </target>
    
    <!-- Compressing files and saving .jar in dist bin -->
    <target name="dist" depends="compile,manifest">
        <echo>Building .jar file</echo>
        <echo>${lib.dir}</echo>
        <copy todir="${build.classes.dir}/lib" flatten="true">
            <path refid="libraries.path"/>
        </copy>

        <jar destfile = "${jar.file}" 
             basedir  = "${build.classes.dir}" 
             manifest = "${build.dir}/MANIFEST.MF">
        </jar>
        <echo>.jar Build Completed Successfully</echo>
    </target>

    <target name="all" depends="dist" />
    
    <!-- 
    ===================================================================
    ==                         DOCUMENTATION                         ==
    ===================================================================
    -->
    <!-- Generate javadocs for current project into ${doc.dir} -->
    <target name="javadoc" depends="init">
        <description>Generate documentation</description>
        <javadoc sourcepath  = "${src.dir}" 
                 author      = "yes"
                 package     = "yes"
                 encoding    = "utf8"
                 doctitle    = "${ant.project.name}"
                 destdir     = "${doc.javadoc.dir}"
                 windowtitle = "${ant.project.name}">
               <classpath refid="libraries.path"/>
         </javadoc>
    </target>

    <target name="publish" depends="javadoc">
        <exec executable="/bin/bash">
            <arg value="publish.sh"/>
        </exec>
    </target>

    <target name="doc" depends="javadoc" />
    
    <!-- 
    ===================================================================
    ==                            CLEAN                              ==
    ===================================================================
    -->
    <target name="clean">
        <delete dir="${dist.dir}" />
        <delete dir="${build.dir}" />
    </target>

</project>
