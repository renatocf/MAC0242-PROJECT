#!/usr/bin/perl
package main;
use v5.14;

# Adicionando módulos no @INC
use FindBin qw($Bin);
use lib "$Bin/../lib";
use lib "$Bin/../lib/RVM";
my $root = "$Bin/../src/parser";

# Pragmas
use strict;
use warnings;

# Packages
use Cortex;
use RVM::RVM;

# Function to evaluate if a scalar is a number (or not)
use Scalar::Util qw(looks_like_number); 

# Opções
use Getopt::Long;
my $help = undef; 
GetOptions("help" => \$help);

# Uso
if(scalar @ARGV != 1) {
    die "USAGE: perl parser.pl program.txt\n";
}


#######################################################################
#                                TESTS                                #
#######################################################################

my $file = shift;

# Criando parser e programa
my $positronic_brain = new Cortex;
my @prog = $positronic_brain->parse("$file");

# Imprimindo código Java
my $java_preamble = << "PREAMBLE";
 package parser;

// Default libraries
import stackable.*;
import robot.Command;
import java.util.Vector;
PREAMBLE

my $java_parser_header = << "PARSER_H";
/**
 * Parser for program $file.
 * This file is automatically 
 * generated by parser.pl
 * \@author parser.pl
 */
public class Parser
{
    /** 
     * Method for uploading the program.
     */
    final public Vector<Command> upload()
    {
PARSER_H

# Preproc: generating textual and numeric variables
my %textual;
my %numeric;

for my $line (@prog)
{
    # Split line fields
    my ($func, $arg, $label) = @$line;
    my $n = 0;
    
    if(defined $arg) 
    {
        if( looks_like_number($arg) ) {
            $line->[1] = "n$arg";
            $numeric{$arg} = "Num n$arg = new Num($arg);";
        }
        elsif( $arg =~ /^["'].*["']$/ ) { 
            $n++; $line->[1] = "msg$n";
            $textual{$arg} = "Text msg$n = new Text($arg);";
        }
    }
}


my $java_bottom = << "PARSER_B";
        PROG.add(null);

        return PROG;
    }
}
PARSER_B

# Prints out parser
open(my $PARSER, ">", "$root/Parser.java");
select $PARSER;

say $java_preamble;
say $java_parser_header;

for my $num (sort keys %numeric)
{
    say " " x 8, $numeric{$num};
}

for my $txt (sort keys %textual)
{
    say " " x 8, $textual{$txt};
}

for my $line (@prog)
{
    print " " x 8; 
    print "PROG.add(new Command(";
    (defined $line->[0]) 
        ? (printf "%-*s", 8, "\'$line->[0]\', ") : (print "null, ");
    (defined $line->[1]) 
        ? (printf "%-*s, ", 4,  $line->[1]) : (print "null, ");
    (defined $line->[2]) 
        ? (print "$line->[2]") : (print "null");
    print "));";
    
    print "\n";
}

say $java_bottom;

close $PARSER;
