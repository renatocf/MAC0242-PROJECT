."---------------------------------------------------------------------
.TH MAC0242-Project.jar 6 "2013-10-27" "Robots_Battle-1.0"
."---------------------------------------------------------------------

.SH NAME 
."---------------------------------------------------------------------
MAC0242-Project.jar - Programming for Fight!

.SH SYNOPSIS
."---------------------------------------------------------------------
MAC0242-Project.jar
.B  [-h] [-d|-v] [-t|-s|-l] 
.BR [--artical|--desertic|--tropical|--continental] 
.I prog1.asm prog2.asm prog3.asm

Program your robots, drag the unstable crystals and throw them 
in the enemy base!

.P
The program can be run in 3 modes:
.TP Textual, with a 16x16 arena running in a terminal;
.TP Small Graphical, with a 16x16 arena in a Java swing based GUI;
.TP Large Graphical, with a 50x50 arena of the same type as above.

As default, the program starts with the small graphical user interface.
See 
.B OPTIONS 
for more details.

.SH OPTIONS
."---------------------------------------------------------------------
.TP
.BR \-d,\ --debug
Run the game in the debug mode, displaying a minimap
with the random scenario and the assembly commands run 
for each robot, timestep by timestep.

.TP 
.BR \-h,\ --help
Display the help message.

.TP 
.BR \-l,\ --large
Runs with a Java Swing based GUI, 
with a 50x50 arena.

.TP 
.BR \-s,\ --small
Runs with a Java Swing based GUI, 
with a 16x16 arena. This is the default
User Interface (UI) mode.

.TP 
.BR \-t,\ --textual
Runs with a textual user interface, designed
to the terms wich accept 
.I Ansi Escape Codes.

.TP
.BR \-v,\ --verbose
Alias for debug. See above.

.TP
.BR --artical
A Frozen map with a frozen lake.

.TP
.BR --desertic
Fill the sand with blood and oil.

.TP
.BR --tropical
Cross the river and battle in the jungle.

.TP
.BR --continental
Untill when this will be just a calm field?

.SS INPUT
."------------------------

To start running the program, first of all it's 
necessary to upload your programs. Some examples
are avaiable in the directory test/. No special 
extension is required, but we recommend using .asm 
as default.

The complete behaviors used by the AI are stored
in the directory behaviors/, and also can be used
by the player as a base to program its robots.

To upload a program, run:

    $ sh reload.sh path/to/your/prog.asm

Finally, to execute, run:

    $ java -jar dist/MAC0242-Project.jar \\
      prog1.asm prog2.asm prog3.asm

.B IMPORTANT: 
If the program is not a stand-alone compiled 
version of the program, do not to move the .jar 
file from its directory, or the dependencies may 
do the program not work.

.SS OUTPUT
."------------------------

In this phase, both a textual and a graphical
user interfaces are avaiable for the user. He
will play  against the AI,  in order to throw 
5  crystals in  the  enemy base  as faster as 
possible.

The human team has color read, and IA's color 
is black.

In order to debug, just run with the flag 
.B '-d'.

.SH FILES
."---------------------------------------------------------------------

A brief description of the directory structure and files.
For more info about the source code, see the online javadoc.
For general explanations about the program, see the LaTeX doc.

.TP 
.I behaviors/
Main programs written in assembly, with the best behaviors
specially programmed to the robots.

.TP 
.I bin/parser.pl
Perl binary file with the wrapper between Perl and Java.
It is used be 
.I reload.sh
to create the Java code from the assembly programs.

.TP 
.I bin/robot.pl
Old executable version of the project, to test the 
prototyped Robot Virtual Machine (RVM).

.TP 
.I build.properties
Used by Apache™ Ant to define all the properties 
(analogous to constant variables) to build.xml.

.TP 
.I build.xml
Used by Apache™ Ant in order to compile the program. 

.tp 
.i data/
All kinds of data needed by the program (as images 
used to print the GUI).

.tp 
.i doc/
All documentation files, including javadoc, LaTeX and
this man page.

.TP 
.I install_ivy.bash
Bash script for installing Apache™ Ivy, either locally
or in the system (if ran as root or 'sudo').

.TP 
.I install_one-jar.bash
Bash script for installing One-Jar™ locally. With it,
Ant's task 'jar' is enabled and it's possible to generate
a stand-alone .jar which works idependently of its 
directory.

.TP 
.I ivy.xml
Dependency file required by Apache™ Ivy. It is used
with Ant to resolve dependencies.

.TP 
.I lib/Cortex.pm
Perl module with the assembly parser. It is used for
both perl binaries as a scanner/lexer of the .asm 
programs.

.TP 
.I lib/RVM/
Old package with the perl implementation of the Robot
Virtual Machine (RVM), no longer used since the Project
phase one.

.TP 
.I lib/*.jar
Dependency files uploaded by the main program. They 
are automatically downloaded by Apache™ Ivy before
the source compilation.

.TP 
.I LICENSE
Apache™ License Version 2.0

.TP 
.I NOTICE 
Apache™ License Version 2.0 header for files.

.TP 
.I publish.sh
Auxiliar shell script with the aim of publish on 
branch 'gh_pages' to publish again the javadoc on 
the Project's online webpage.

.TP 
.I README.md
Readme for basic info about install/run and 
Project contributors.

.TP
.I reload.sh
Program to upload the assemnbly programs and 
recompile the program binary, allowing the player
to use that assembly code. For more info, see 
section 
.B INPUT

.TP
.I src/
All source files with the package and class 
structures. For detailed info, check the 
javadoc on the web.

.TP
.I test/
Sample with many RVM assembly programs, testing
the multiple aspects of the Virtual Machine.

.TP
.I TODO.txt
TODO list with the completed tasks and what is
still to be done.

.SH AUTHOR
."---------------------------------------------------------------------
Karina Suemi Awoki, IME-USP.
Renato Cordeiro Ferreira, IME-USP.
Vinícius Nascimento Silva, IME-USP.

.SH SEE ALSO
."---------------------------------------------------------------------
.P
.B Project webpage
.I http://renatocf.github.io/MAC0242-PROJECT/

.P 
.B IME-USP
.I http://www.ime.usp.br/
